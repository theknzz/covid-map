{"version":3,"sources":["store/actionList.js","functions/round.js","functions/parseCountry.js","functions/parseCountryToJsx.js","components/Map/MapChart.js","store/actions/infoActions.js","components/LeftPane/GlobalCases.js","components/Containers/CountryCase.js","components/Containers/CountryCases.js","components/LeftPane/Updated.js","components/LeftPane/LeftPane.js","components/RightPane/GlobalInfo.js","components/RightPane/PortugalGraph.js","components/RightPane/GenderGraph.js","components/RightPane/RightPane.js","components/Theme/Theme.js","App.js","reportWebVitals.js","store/reducers/infoReducer.js","store/reducers/rootReducer.js","index.js"],"names":["GetCountryInfoSuccess","GetCountryInfoError","GetWorldInfoSuccess","GetWorldInfoError","GetGlobalInfoSuccess","GetGlobalInfoError","PortugalServerDown","GetPortugalInfoSuccess","rounded","num","Math","round","parseCountry","jsonObject","updatedAt","moment","updated","fromNow","name","country","flag","countryInfo","infected","cases","deaths","recovered","tests","Flag","styled","img","MapContainer","div","props","theme","border","mapBackground","MapChart","setTooltipContent","getInfo","getWorld","getGlobal","getPortugal","portugal","useTheme","useEffect","className","data-tip","projectionConfig","scale","width","height","center","zoom","geography","geographies","map","geo","onClick","src","alt","parseCountryToJsx","onMouseEnter","properties","NAME","POP_EST","onMouseLeave","style","default","fill","mapFill","outline","hover","pressed","rsmKey","connect","state","info","dispatch","getState","fetch","then","res","json","r","parsedCountry","type","data","catch","err","console","error","getMapInfo","parsedWorld","global","resp","status","days","confirmados","recuperados","infected_m","confirmados_m","infected_f","confirmados_f","memo","Container","boxBackground","text","GlobalCases","nr","Row","NrCases","color","CountryName","CountryCase","CountryCases","world","append","countryCases","Updated","background","GlobalInfo","trackedDays","i","push","nrInfected","nrRecovered","element","document","getElementById","context","getContext","Chart","labels","datasets","label","backgroundColor","borderWidth","options","title","display","scales","yAxes","ticks","beginAtZero","id","GraphWrapper","Title","canvas","infectedM","value","infectedF","length","borderColor","Wrapper","lightTheme","toggleBorder","darkTheme","h1","isDark","Body","Header","App","useState","setTheme","content","setContent","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialData","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d87b8aaf.chunk.js","sourcesContent":["\nexport const GetCountryInfoSuccess = 'GET_COUNTRY_INFO_SUCCESS';\nexport const GetCountryInfoError = 'GET_COUNTRY_INFO_ERROR';\n\nexport const GetWorldInfoSuccess = 'GET_WORLD_INFO_SUCCESS';\nexport const GetWorldInfoError = 'GET_WORLD_INFO_ERROR'\n\nexport const GetGlobalInfoSuccess = 'GET_GLOBAL_INFO_SUCCESS'\nexport const GetGlobalInfoError = 'GET_GLOBAL_INFO_ERROR'\n\nexport const PortugalServerDown = 'SERVER_DOWN'\nexport const GetPortugalInfoSuccess = 'GET_PORTUGAL_INFO_SUCCESS'","export const rounded = num => {\n    if (num > 1000000000) {\n        return Math.round(num / 100000000) / 10 + \"Bn\";\n    } else if (num > 1000000) {\n        return Math.round(num / 100000) / 10 + \"M\";\n    } else {\n        return Math.round(num / 100) / 10 + \"K\";\n    }\n};","import moment from \"moment\";\nimport { rounded } from \"./round\";\n\nexport const parseCountry = jsonObject => {\n    return {\n        updatedAt: moment(jsonObject.updated).fromNow(),\n        name: jsonObject.country,\n        flag: jsonObject.countryInfo.flag,\n        infected: rounded(jsonObject.cases),\n        deaths: rounded(jsonObject.deaths),\n        recovered: rounded(jsonObject.recovered),\n        tests: rounded(jsonObject.tests),\n    }\n}","import React from 'react'\nimport styled from \"@emotion/styled\";\n\nconst Flag = styled.img`\n    width: auto;\n    height: 50px;\n`\n\nexport const parseCountryToJsx = (country) => {\n    return (\n        <div>\n            <div><h3>{country.name}</h3><Flag src={country.flag} alt={'country_flag'}/></div><br/>\n            <strong>Infected: </strong>{country.infected}<br/>\n            <strong>Deaths: </strong>{country.deaths}<br/>\n            <strong>Recovered: </strong>{country.recovered}<br/>\n            <strong>Tests: </strong>{country.tests}\n        </div>\n\n    )\n}\n","import React, { memo, useEffect } from \"react\";\nimport { connect } from 'react-redux'\nimport { getGlobalInfo, getMapInfo, getWorldInfo, portugalInfo } from \"../../store/actions/infoActions\";\nimport styled from \"@emotion/styled\";\nimport { parseCountryToJsx } from \"../../functions/parseCountryToJsx\";\nimport {\n    ZoomableGroup,\n    ComposableMap,\n    Geographies,\n    Geography\n} from \"react-simple-maps\";\nimport {useTheme} from \"emotion-theming\";\n\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapContainer = styled.div`\n    max-height: 87.2vh;\n    flex: 2;\n    display: flex;\n    justify-content: center;\n    flex-flow: column wrap;\n    border: 1px solid ${props => props.theme.border};\n    background-color: ${props => props.theme.mapBackground};\n    margin: 5px;\n`\n\nconst MapChart = ({ setTooltipContent, getInfo, country, getWorld, getGlobal, getPortugal, portugal }) => {\n\n    const theme = useTheme();\n\n    useEffect( () => {\n        getWorld();\n        getGlobal();\n        getPortugal();\n    }, [ ]);\n\n    return (\n        <MapContainer theme={theme}>\n            <ComposableMap className={'map'} data-tip=\"\" projectionConfig={{ scale: 50 }} width={500} height={500}>\n                <ZoomableGroup center={[20, 180]} zoom={4}>\n                    <Geographies geography={geoUrl}>\n                        {({ geographies }) =>\n                            geographies.map(geo => (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    onClick={() => {\n                                        setTooltipContent(parseCountryToJsx(country));\n                                    }}\n                                    onMouseEnter={() => {\n                                        const { NAME, POP_EST } = geo.properties;\n                                        getInfo(NAME);\n                                        setTooltipContent(`${NAME}`);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltipContent(\"\");\n                                    }}\n                                    style={{\n                                        default: {\n                                            fill: theme.mapFill,\n                                            outline: \"none\",\n                                        },\n                                        hover: {\n                                            fill: \"#F53\",\n                                            outline: \"none\"\n                                        },\n                                        pressed: {\n                                            fill: \"#E42\",\n                                            outline: \"none\"\n                                        }\n                                    }}\n                                />\n                            ))\n                        }\n                    </Geographies>\n                </ZoomableGroup>\n            </ComposableMap>\n        </MapContainer>\n    );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getInfo: (country) => dispatch(getMapInfo(country)),\n        getWorld: () => dispatch(getWorldInfo()),\n        getGlobal: () => dispatch(getGlobalInfo()),\n        getPortugal: () => dispatch(portugalInfo())\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        country: state.info.country,\n        portugal: state.info.portugal,\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(MapChart));\n","import {\n    GetCountryInfoSuccess,\n    GetCountryInfoError,\n    GetWorldInfoSuccess,\n    GetWorldInfoError,\n    GetGlobalInfoSuccess,\n    GetGlobalInfoError,\n    PortugalServerDown,\n    GetPortugalInfoSuccess,\n} from \"../actionList\";\nimport { parseCountry } from \"../../functions/parseCountry\";\nimport moment from \"moment\";\nimport {rounded} from \"../../functions/round\";\n\nexport const getMapInfo = (country) => {\n    return (dispatch, getState) =>  {\n        fetch(`https://disease.sh/v3/covid-19/countries/${country}?strict=true`)\n            .then( res => res.json()\n                .then( r => {\n                    // parse the api response to store just the used data\n                    const parsedCountry = parseCountry(r);\n                    dispatch({type: GetCountryInfoSuccess, data: parsedCountry});\n                }))\n            .catch( err => {\n                console.error(err);\n                dispatch({type: GetCountryInfoError, data: err});\n            })\n    }\n}\n\nexport const getWorldInfo = () => {\n    return (dispatch, getState) => {\n        fetch('https://disease.sh/v3/covid-19/countries')\n            .then( res => res.json()\n                .then( r =>{\n                    const parsedWorld = r.map( country => {\n                        return parseCountry(country);\n                    });\n                    dispatch({ type: GetWorldInfoSuccess, data: parsedWorld})\n                }))\n            .catch( err => {\n                dispatch({ type: GetWorldInfoError, data: err})\n            })\n    }\n}\n\nexport const getGlobalInfo = () => {\n    return (dispatch, getState) => {\n        fetch('https://disease.sh/v3/covid-19/all')\n            .then(json => json.json()\n                .then( res => {\n                    const global =  {\n                        updatedAt: moment(res.updated).fromNow(),\n                        infected: rounded(res.cases),\n                        recovered: rounded(res.recovered),\n                        deaths: rounded(res.deaths),\n                    }\n                    dispatch({ type: GetGlobalInfoSuccess, data: global});\n                })\n            )\n            .catch(err => {\n                console.error(err)\n                dispatch({type: GetGlobalInfoError, data: err})\n            })\n    }\n}\n\nexport const portugalInfo = ()  => {\n    return (dispatch, getState) => {\n        fetch('https://covid19-api.vost.pt/Requests/get_status')\n            .then( res => res.json()\n                .then( resp => {\n                    if (resp.status === \"Server is OK\") {\n                        fetch('https://covid19-api.vost.pt/Requests/get_full_dataset')\n                            .then( res => res.json()\n                                .then(resp => {\n                                    dispatch({ type: GetPortugalInfoSuccess, data: {\n                                            days: resp.data,\n                                            infected: resp.confirmados,\n                                            recovered: resp.recuperados,\n                                            infected_m: resp.confirmados_m,\n                                            infected_f: resp.confirmados_f,\n                                        }})\n                                }))\n                            .catch()\n                    }\n                    dispatch({ type: PortugalServerDown })\n                })\n            )\n            .catch()\n    }\n}","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    background-color: ${props =>props.theme.boxBackground};\n    color: ${props =>props.theme.text};\n    width: 100%;\n    padding: 20px 0px;\n    display: flex;\n    justify-content: center;\n    flex-flow: column wrap;\n    align-items: center;\n    border: 1px solid ${props =>props.theme.border};\n    > h1 {\n        color: red;\n        margin: 10px !important;\n    }\n`\n\nconst GlobalCases = ({ nr }) => {\n    const theme = useTheme();\n    return (\n        <Container theme={theme}>Global Cases: <h1>{nr}</h1></Container>\n    )\n}\n\nexport default GlobalCases","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport {useTheme} from \"emotion-theming\";\n\nconst Row = styled.div`\n    display: flex;\n    padding: 3px;\n    border-bottom: 1px solid ${props => props.theme.border};\n    width: 100%;\n`\n\nconst NrCases = styled.div`\n    flex: 1;\n    font-weight: bold;\n    display: flex;\n    flex-flow: column;\n    align-items: center;\n    justify-content: center;\n    color: ${(props) => props.color === 'red' ? 'red' : 'green'};\n`\n\nconst CountryName = styled.div`\n    flex: 2;\n    color: ${props => props.theme.text};\n`\n\nconst CountryCase = ({ name, cases, color }) => {\n    const theme = useTheme();\n    return (\n        <Row theme={theme}>\n            <NrCases color={color}>{cases}</NrCases>\n            <CountryName theme={theme}>{name}</CountryName>\n        </Row>\n    );\n}\n\nexport default CountryCase","import React from 'react'\nimport styled from '@emotion/styled'\nimport CountryCase from './CountryCase'\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    flex: 1;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    overflow-y: auto;\n    color: ${props => props.theme.text};\n    justify-content: center;\n    background-color: ${props => props.theme.boxBackground};\n    margin-top: 10px;\n    max-height: 60vh;\n    border: 1px solid ${props => props.theme.border};\n    > h5 {\n        margin: 20px !important;\n    }\n    @media screen and (max-height: 768px) {\n        > h5 {\n        }\n    }\n`\n\nconst CountryCases = ({ world, color, append }) => {\n    const theme = useTheme();\n\n    const countryCases = world.map(country => {\n        return <CountryCase color={color} key={country.name} name={country.name} cases={country.infected} />\n    })\n\n    return (\n        <Container theme={theme}>\n            <h5>Cases {append} by Countries</h5>\n            {countryCases}\n        </Container>\n    )\n}\n\nexport default CountryCases","import React from 'react'\nimport styled from '@emotion/styled'\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    flex: 1;\n    display: flex;\n    flex-flow: column wrap;\n    align-items: center;\n    margin-top: 20px;\n    background-color: ${props =>props.theme.boxBackground};\n    color: ${props =>props.theme.text};\n    border: 1px solid ${props =>props.theme.border};\n    width: 100%;\n    padding: 10px 0px;\n    & > h3 {\n        margin: 5px !important; \n    }\n    \n    & > a {\n        font-size: 15px;\n    }\n`\n\nconst Updated = ({ global }) => {\n    const theme = useTheme();\n    return (\n        <Container theme={theme}>\n            <a>Updated</a>\n            <h3>{global.updatedAt}</h3>\n        </Container>\n    );\n}\n\nexport default Updated","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport { connect } from 'react-redux'\nimport GlobalCases from \"./GlobalCases\";\nimport CountryCases from \"../Containers/CountryCases\";\nimport Updated from \"./Updated\";\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    flex: 0.7;\n    background-color: ${props => props.theme.background};\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    max-height: 85vh;\n    border: 1px solid ${props => props.theme.border};\n    margin: 5px;\n    @media screen and (max-height: 768px) {\n        max-height: none;\n    }\n`\n\nconst LeftPane = ({ global, world }) => {\n\n    const theme = useTheme();\n\n    return (\n        <Container theme={theme}>\n            <GlobalCases nr={global.infected} />\n            <CountryCases append={''} world={world} color={'red'}/>\n            <Updated global={global}/>\n        </Container>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        global: state.info.global,\n        world: state.info.world,\n    }\n}\n\nexport default connect(mapStateToProps)(LeftPane)","import React from 'react'\nimport styled from '@emotion/styled'\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    background-color: ${props =>props.theme.boxBackground};\n    color: ${props =>props.theme.text};\n    width: 100%;\n    padding: 30px 0px;\n    display: flex;\n    justify-content: center;\n    flex-flow: column wrap;\n    align-items: center;\n    border: 1px solid ${props =>props.theme.border};\n    > h1 {\n        color: green;\n        margin: 10px !important;\n    }\n`\n\nconst GlobalInfo = ({ global }) => {\n    const theme = useTheme();\n    return (\n        <Container theme={theme}>\n            Global Info\n            <h1>{global.recovered}</h1>\n        </Container>\n    )\n}\n\nexport default GlobalInfo","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport Chart from 'chart.js'\nimport { connect } from 'react-redux'\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    flex: 2;\n    border: 1px solid ${props =>props.theme.border};\n    margin-top: 10px;\n    background-color: ${props =>props.theme.boxBackground};\n    @media screen and (max-height: 768px) {\n        > canvas {\n            max-width: 100%;\n            flex: 1;\n        }\n    }\n`\n\nconst PortugalGraph = ({ portugal }) => {\n    // parse json object into array of tracked days\n    let trackedDays = [];\n    for (let i in portugal.days)\n        trackedDays.push(portugal.days[i])\n\n    // parse json object into array of infected\n    let nrInfected = [];\n    for (let i in portugal.infected) {\n        nrInfected.push(portugal.infected[i])\n    }\n\n    // parse json object into array of recovered\n    let nrRecovered = [];\n    for (let i in portugal.recovered) {\n        nrRecovered.push(portugal.recovered[i])\n    }\n\n    const element = document.getElementById('myChart');\n    const context = element && element.getContext('2d');\n\n    context && new Chart(context, {\n        type: 'line',\n        data: {\n            labels: trackedDays,\n            datasets: [\n                {\n                    label: '# of infected',\n                    data: nrInfected,\n                    backgroundColor: [\n                        'rgba(255,25,25, 0.2)',\n                    ],\n                    borderWidth: 1\n                },\n                {\n                    label: '# of recovered',\n                    data: nrRecovered,\n                    backgroundColor: [\n                        'rgba(152,253,149, 0.6)',\n                    ],\n                    borderWidth: 1\n                }\n                ]\n        },\n        options: {\n            title: {\n                display: true,\n                text: 'Portugal track',\n            },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n\n    const theme = useTheme();\n\n    return (\n        <Container theme={theme}>\n            <canvas id={'myChart'} width={660}/>\n        </Container>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        portugal: state.info.portugal,\n    }\n}\n\nexport default connect(mapStateToProps)(PortugalGraph)","import React from 'react'\nimport Chart from 'chart.js'\nimport { connect } from 'react-redux'\nimport styled from '@emotion/styled'\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    margin-left: 10px;\n    border: 1px solid ${props =>props.theme.border};\n    margin-top: 10px;\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n    overflow: hidden;\n    background-color: ${props =>props.theme.boxBackground};\n`\n\nconst GraphWrapper = styled.div`\n     @media screen and (max-height: 768px) {\n        > canvas {\n            margin: 10px;\n        }\n        width: 100vw;\n        overflow: hidden;\n    }\n    flex: 3;\n`\nconst Title = styled.div`\n    flex: 0.5;\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    color: ${props =>props.theme.text};\n    margin-top: 6px;\n    > h5 {\n        margin: 20px !important;\n    }\n`\n\nconst GenderGraph = ({ portugal }) => {\n\n    const theme = useTheme();\n\n    const canvas = document.getElementById('genderGraph');\n    const context = canvas && canvas.getContext('2d');\n\n    let infectedM = [];\n    for (let i in portugal.infected_m) {\n        const value = portugal.infected_m[i];\n        infectedM.push(value ? value : 0);\n    }\n\n\n    let infectedF = [];\n    for (let i in portugal.infected_f) {\n        const value = portugal.infected_f[i];\n        infectedF.push(value ? value : 0);\n    }\n\n\n    context && new Chart(context, {\n        type: 'bar',\n        data: {\n            labels: [''],\n            datasets: [\n                {\n                    label: [\"# of Man\"],\n                    data: [infectedM[infectedM.length-1]],\n                    backgroundColor: [\n                        'rgba(54, 162, 235, 0.6)',\n                    ],\n                    borderColor: [\n                        'rgba(54, 162, 235, 1)',\n                    ],\n                    borderWidth: 1\n                },\n                {\n                        label: ['# of Woman'],\n                        data: [infectedF[infectedF.length-1]],\n                        backgroundColor: [\n                            'rgba(255,0,56,0.6)',\n                        ],\n                        borderColor: [\n                            'rgba(253,0,53)',\n                        ],\n                        borderWidth: 1\n                }]\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n\n    return (\n        <Container theme={theme}>\n            <Title theme={theme}><h5>Gender Graph - Portugal</h5></Title>\n            <GraphWrapper>\n                <canvas id={'genderGraph'} width={300} height={250}/>\n            </GraphWrapper>\n        </Container>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        portugal: state.info.portugal,\n    }\n}\n\nexport default connect(mapStateToProps)(GenderGraph)","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport GlobalInfo from \"./GlobalInfo\";\nimport { connect } from 'react-redux'\nimport CountryCases from \"../Containers/CountryCases\";\nimport PortugalGraph from \"./PortugalGraph\";\nimport GenderGraph from \"./GenderGraph\";\nimport {useTheme} from \"emotion-theming\";\n\nconst Container = styled.div`\n    flex: 1;\n    background-color: ${props => props.theme.background};\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    max-height: 85vh;\n    border: 1px solid ${props => props.theme.border};\n    margin: 5px;\n    @media screen and (max-width: 758px) {\n        max-height: auto;\n        margin: 5px;\n        max-height: none;\n        overflow: hidden;\n    }\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    overflow: auto;\n    @media (max-width: 758px) {\n        flex-flow: column nowrap;\n        justify-content: center;\n        flex: 1;\n        width: 100%;\n        align-items: center;\n        overflow: hidden;\n    }\n`\n\nconst RightPane = ({ global, world }) => {\n    const theme = useTheme();\n    return (\n        <Container theme={theme}>\n            <GlobalInfo global={global}/>\n            <Wrapper>\n                <CountryCases append={'recovered'} world={world} color={'green'} />\n                <GenderGraph />\n            </Wrapper>\n            <PortugalGraph />\n        </Container>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        global: state.info.global,\n        world: state.info.world,\n    }\n}\n\nexport default connect(mapStateToProps)(RightPane)","export const lightTheme = {\n    background: '#b8b8b8',\n    boxBackground: '#d7d7d7',\n    text: '#363537',\n    toggleBorder: '#FFF',\n    border: 'black',\n    mapFill: '#b3b3b3',\n    mapBackground: '#c4fbff',\n}\n\nexport const darkTheme = {\n    background: '#363636',\n    boxBackground: '#1d1d1d',\n    text: '#bdbdbd',\n    toggleBorder: '#6B8096',\n    border: '#525252',\n    mapFill: '#2a2a28',\n    mapBackground: '#010f1a',\n}","import MapChart from \"./components/Map/MapChart\";\nimport React, { useState } from \"react\";\nimport ReactTooltip from 'react-tooltip';\nimport styled from \"@emotion/styled\";\nimport LeftPane from \"./components/LeftPane/LeftPane\";\nimport RightPane from \"./components/RightPane/RightPane\";\nimport { ThemeProvider } from 'emotion-theming'\nimport { darkTheme, lightTheme } from \"./components/Theme/Theme\";\nimport { useTheme } from 'emotion-theming'\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin: 0px 30px;\n    @media screen and (max-width: 758px) {\n        display: flex;\n        width: 100%;\n        flex-flow: column nowrap;\n        margin: 0px;\n    }\n`\n\nconst Title = styled.h1`\n    max-height: 10vh;\n    color: ${props => props.isDark ? 'white' : 'black'};\n    display: flex;\n    justify-content: center;\n    flex: 1;\n    > img {\n        width: 50px;\n        height: 50px;\n    }\n    @media screen and (max-width: 758px) {\n        font-size: 1.5em;\n        > img {\n            width: 35px;\n            height: 35px;\n        }    \n    }\n`\n\nconst Body = styled.div`\n    display: flex;\n    flex-flow: column nowrap;\n    min-height: 100vh;\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background-color: ${props => props.isDark ? 'black' : '#ffffff'};\n    font-family: 'Montserrat', sans-serif;\n`\n\nconst Header = styled.div`\n    display: flex;\n    > button {\n        border: none;\n        background-color: ${props => props.isDark ? 'black' : '#ffffff'};\n        color: ${props => props.isDark ? 'white' : 'black'};\n        font-size: 2em;\n        &: focus {\n            outline: none;\n        }\n    }\n`\n\n\nfunction App() {\n\n    const [isDark, setTheme] = useState(true);\n    const [content, setContent] = useState('');\n    const sun = '🔆';\n    const moon = '🌕';\n\n    const theme = useTheme();\n\n    const handleClick = e => {\n        setTheme(!isDark);\n    }\n\n    return (\n        <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n            <Body isDark={isDark}>\n                <Header isDark={isDark}>\n                    <Title isDark={isDark}>\n                        C<img src={'https://freesvg.org/img/Virus.png'} alt={'o'}/>\n                        vid Dashboard\n                    </Title>\n                    <button onClick={handleClick}>{isDark ? moon : sun}</button>\n                </Header>\n                <Container theme={theme}>\n                    <LeftPane />\n                    <MapChart setTooltipContent={setContent} />\n                    <RightPane />\n                </Container>\n                <ReactTooltip>{content}</ReactTooltip>\n            </Body>\n        </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    GetCountryInfoSuccess,\n    GetCountryInfoError,\n    GetWorldInfoSuccess,\n    GetWorldInfoError,\n    GetGlobalInfoSuccess,\n    GetGlobalInfoError,\n    GetPortugalInfoSuccess,\n    PortugalServerDown,\n} from \"../actionList\";\n\nconst initialData = {\n    country: {},\n    world: [{}],\n    error: '',\n    global: {},\n    portugal: {},\n}\n\nexport const infoReducer = (state = initialData, action) => {\n    switch (action.type) {\n        case GetCountryInfoSuccess:\n            return {\n                ...state,\n                country: action.data,\n                error: '',\n            };\n        case GetCountryInfoError:\n            return {\n                ...state,\n                error: action.data,\n            };\n        case GetWorldInfoSuccess:\n            return {\n                ...state,\n                world: action.data,\n                error: '',\n            };\n        case GetWorldInfoError:\n            return {\n                ...state,\n                error: action.data,\n            }\n        case GetGlobalInfoSuccess:\n            return {\n                ...state,\n                error: '',\n                global: action.data,\n            }\n        case GetGlobalInfoError:\n            return {\n                ...state,\n                error: action.data,\n            }\n        case GetPortugalInfoSuccess:\n            return {\n                ...state,\n                portugal: action.data,\n                error: '',\n            }\n        case PortugalServerDown:\n            return {\n                ...state,\n                error: 'Portugal server is longer active',\n            }\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport { infoReducer } from \"./infoReducer\";\n\nconst rootReducer = combineReducers( {\n    info: infoReducer,\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './store/reducers/rootReducer'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}