{"ast":null,"code":"import{GetCountryInfoSuccess,GetCountryInfoError,GetWorldInfoSuccess,GetWorldInfoError,GetGlobalInfoSuccess,GetGlobalInfoError,PortugalServerDown,GetPortugalInfoSuccess}from\"../actionList\";import{parseCountry}from\"../../functions/parseCountry\";import moment from\"moment\";import{rounded}from\"../../functions/round\";export var getMapInfo=function getMapInfo(country){return function(dispatch,getState){fetch(\"https://disease.sh/v3/covid-19/countries/\".concat(country,\"?strict=true\")).then(function(res){return res.json().then(function(r){// parse the api response to store just the used data\nvar parsedCountry=parseCountry(r);dispatch({type:GetCountryInfoSuccess,data:parsedCountry});});}).catch(function(err){console.error(err);dispatch({type:GetCountryInfoError,data:err});});};};export var getWorldInfo=function getWorldInfo(){return function(dispatch,getState){fetch('https://disease.sh/v3/covid-19/countries').then(function(res){return res.json().then(function(r){var parsedWorld=r.map(function(country){return parseCountry(country);});dispatch({type:GetWorldInfoSuccess,data:parsedWorld});});}).catch(function(err){dispatch({type:GetWorldInfoError,data:err});});};};export var getGlobalInfo=function getGlobalInfo(){return function(dispatch,getState){fetch('https://disease.sh/v3/covid-19/all').then(function(json){return json.json().then(function(res){var global={updatedAt:moment(res.updated).fromNow(),infected:rounded(res.cases),recovered:rounded(res.recovered),deaths:rounded(res.deaths)};dispatch({type:GetGlobalInfoSuccess,data:global});});}).catch(function(err){console.error(err);dispatch({type:GetGlobalInfoError,data:err});});};};export var portugalInfo=function portugalInfo(){return function(dispatch,getState){fetch('https://covid19-api.vost.pt/Requests/get_status').then(function(res){return res.json().then(function(resp){if(resp.status===\"Server is OK\"){fetch('https://covid19-api.vost.pt/Requests/get_full_dataset').then(function(res){return res.json().then(function(resp){dispatch({type:GetPortugalInfoSuccess,data:{days:resp.data,infected:resp.confirmados,recovered:resp.recuperados,infected_m:resp.confirmados_m,infected_f:resp.confirmados_f}});});}).catch();}dispatch({type:PortugalServerDown});});}).catch();};};","map":{"version":3,"sources":["/home/joaquim/internship/covid-map/src/store/actions/infoActions.js"],"names":["GetCountryInfoSuccess","GetCountryInfoError","GetWorldInfoSuccess","GetWorldInfoError","GetGlobalInfoSuccess","GetGlobalInfoError","PortugalServerDown","GetPortugalInfoSuccess","parseCountry","moment","rounded","getMapInfo","country","dispatch","getState","fetch","then","res","json","r","parsedCountry","type","data","catch","err","console","error","getWorldInfo","parsedWorld","map","getGlobalInfo","global","updatedAt","updated","fromNow","infected","cases","recovered","deaths","portugalInfo","resp","status","days","confirmados","recuperados","infected_m","confirmados_m","infected_f","confirmados_f"],"mappings":"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","sourcesContent":["import {\n    GetCountryInfoSuccess,\n    GetCountryInfoError,\n    GetWorldInfoSuccess,\n    GetWorldInfoError,\n    GetGlobalInfoSuccess,\n    GetGlobalInfoError,\n    PortugalServerDown,\n    GetPortugalInfoSuccess,\n} from \"../actionList\";\nimport { parseCountry } from \"../../functions/parseCountry\";\nimport moment from \"moment\";\nimport {rounded} from \"../../functions/round\";\n\nexport const getMapInfo = (country) => {\n    return (dispatch, getState) =>  {\n        fetch(`https://disease.sh/v3/covid-19/countries/${country}?strict=true`)\n            .then( res => res.json()\n                .then( r => {\n                    // parse the api response to store just the used data\n                    const parsedCountry = parseCountry(r);\n                    dispatch({type: GetCountryInfoSuccess, data: parsedCountry});\n                }))\n            .catch( err => {\n                console.error(err);\n                dispatch({type: GetCountryInfoError, data: err});\n            })\n    }\n}\n\nexport const getWorldInfo = () => {\n    return (dispatch, getState) => {\n        fetch('https://disease.sh/v3/covid-19/countries')\n            .then( res => res.json()\n                .then( r =>{\n                    const parsedWorld = r.map( country => {\n                        return parseCountry(country);\n                    });\n                    dispatch({ type: GetWorldInfoSuccess, data: parsedWorld})\n                }))\n            .catch( err => {\n                dispatch({ type: GetWorldInfoError, data: err})\n            })\n    }\n}\n\nexport const getGlobalInfo = () => {\n    return (dispatch, getState) => {\n        fetch('https://disease.sh/v3/covid-19/all')\n            .then(json => json.json()\n                .then( res => {\n                    const global =  {\n                        updatedAt: moment(res.updated).fromNow(),\n                        infected: rounded(res.cases),\n                        recovered: rounded(res.recovered),\n                        deaths: rounded(res.deaths),\n                    }\n                    dispatch({ type: GetGlobalInfoSuccess, data: global});\n                })\n            )\n            .catch(err => {\n                console.error(err)\n                dispatch({type: GetGlobalInfoError, data: err})\n            })\n    }\n}\n\nexport const portugalInfo = ()  => {\n    return (dispatch, getState) => {\n        fetch('https://covid19-api.vost.pt/Requests/get_status')\n            .then( res => res.json()\n                .then( resp => {\n                    if (resp.status === \"Server is OK\") {\n                        fetch('https://covid19-api.vost.pt/Requests/get_full_dataset')\n                            .then( res => res.json()\n                                .then(resp => {\n                                    dispatch({ type: GetPortugalInfoSuccess, data: {\n                                            days: resp.data,\n                                            infected: resp.confirmados,\n                                            recovered: resp.recuperados,\n                                            infected_m: resp.confirmados_m,\n                                            infected_f: resp.confirmados_f,\n                                        }})\n                                }))\n                            .catch()\n                    }\n                    dispatch({ type: PortugalServerDown })\n                })\n            )\n            .catch()\n    }\n}"]},"metadata":{},"sourceType":"module"}