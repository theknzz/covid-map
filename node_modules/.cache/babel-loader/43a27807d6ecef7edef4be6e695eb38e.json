{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joaquim/internship/covid-map/src/components/RightPane/Graph.js\";\nimport React, { useRef } from 'react';\nimport styled from \"@emotion/styled\";\nimport Chart from 'chart.js';\nimport { connect } from 'react-redux';\nconst Container = styled.div`\n    flex: 0;\n`;\n_c = Container;\n\nconst Graph = ({\n  portugal\n}) => {\n  console.log('portugal: ', portugal.infected);\n  let trackedDays = [];\n\n  for (let i in portugal.days) trackedDays.push(portugal.days[i]);\n\n  console.log(trackedDays);\n  const element = document.getElementById('myChart');\n  const context = element && element.getContext('2d');\n  console.log(context);\n  const myChart = context && new Chart(context, {\n    type: 'line',\n    data: {\n      labels: trackedDays,\n      datasets: [{\n        label: '# of Votes',\n        data: [12, 19, 3, 5, 2, 3, 200],\n        backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n        borderColor: ['rgba(255, 99, 132, 1)'],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      title: {\n        display: true,\n        text: 'Portugal track'\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: 'myChart',\n      width: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Graph;\n\nconst mapStateToProps = state => {\n  return {\n    portugal: state.info.portugal\n  };\n};\n\nexport default connect(mapStateToProps)(Graph);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Graph\");","map":{"version":3,"sources":["/home/joaquim/internship/covid-map/src/components/RightPane/Graph.js"],"names":["React","useRef","styled","Chart","connect","Container","div","Graph","portugal","console","log","infected","trackedDays","i","days","push","element","document","getElementById","context","getContext","myChart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","title","display","text","scales","yAxes","ticks","beginAtZero","mapStateToProps","state","info"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;AAC7B;AACA,CAFA;KAAMD,S;;AAIN,MAAME,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,QAAQ,CAACG,QAAnC;AAEA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAT,IAAcL,QAAQ,CAACM,IAAvB,EACIF,WAAW,CAACG,IAAZ,CAAiBP,QAAQ,CAACM,IAAT,CAAcD,CAAd,CAAjB;;AAEJJ,EAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ;AAEA,QAAMI,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAhB;AACA,QAAMC,OAAO,GAAGH,OAAO,IAAIA,OAAO,CAACI,UAAR,CAAmB,IAAnB,CAA3B;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AACA,QAAME,OAAO,GAAGF,OAAO,IAAI,IAAIhB,KAAJ,CAAUgB,OAAV,EAAmB;AAC1CG,IAAAA,IAAI,EAAE,MADoC;AAE1CC,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEZ,WADN;AAEFa,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,YADA;AAEPH,QAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,CAFC;AAGPI,QAAAA,eAAe,EAAE,CACb,yBADa,CAHV;AAMPC,QAAAA,WAAW,EAAE,CACT,uBADS,CANN;AASPC,QAAAA,WAAW,EAAE;AATN,OAAD;AAFR,KAFoC;AAgB1CC,IAAAA,OAAO,EAAE;AACLC,MAAAA,KAAK,EAAE;AACHC,QAAAA,OAAO,EAAE,IADN;AAEHC,QAAAA,IAAI,EAAE;AAFH,OADF;AAKLC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAC;AACJC,UAAAA,KAAK,EAAE;AACHC,YAAAA,WAAW,EAAE;AADV;AADH,SAAD;AADH;AALH;AAhBiC,GAAnB,CAA3B;AA8BA,sBACI,QAAC,SAAD;AAAA,2BACI;AAAQ,MAAA,EAAE,EAAE,SAAZ;AAAuB,MAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhDD;;MAAM9B,K;;AAkDN,MAAM+B,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACH/B,IAAAA,QAAQ,EAAE+B,KAAK,CAACC,IAAN,CAAWhC;AADlB,GAAP;AAGH,CAJD;;AAMA,eAAeJ,OAAO,CAACkC,eAAD,CAAP,CAAyB/B,KAAzB,CAAf","sourcesContent":["import React, { useRef } from 'react'\nimport styled from \"@emotion/styled\";\nimport Chart from 'chart.js'\nimport { connect } from 'react-redux'\n\nconst Container = styled.div`\n    flex: 0;\n`\n\nconst Graph = ({ portugal }) => {\n    console.log('portugal: ', portugal.infected)\n\n    let trackedDays = [];\n\n    for (let i in portugal.days)\n        trackedDays.push(portugal.days[i])\n\n    console.log(trackedDays)\n\n    const element = document.getElementById('myChart');\n    const context = element && element.getContext('2d');\n    console.log(context)\n    const myChart = context && new Chart(context, {\n        type: 'line',\n        data: {\n            labels: trackedDays,\n            datasets: [{\n                label: '# of Votes',\n                data: [12, 19, 3, 5, 2, 3, 200],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            title: {\n                display: true,\n                text: 'Portugal track',\n            },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n    return (\n        <Container>\n            <canvas id={'myChart'} width=\"400\" />\n        </Container>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        portugal: state.info.portugal,\n    }\n}\n\nexport default connect(mapStateToProps)(Graph)"]},"metadata":{},"sourceType":"module"}