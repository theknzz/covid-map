{"ast":null,"code":"import { GetCountryInfoSuccess, GetCountryInfoError, GetWorldInfoSuccess, GetWorldInfoError, GetGlobalInfoSuccess, GetGlobalInfoError, PortugalServerDown, GetPortugalInfoSuccess } from \"../actionList\";\nimport { parseCountry } from \"../../functions/parseCountry\";\nimport moment from \"moment\";\nimport { rounded } from \"../../functions/round\";\nexport const getMapInfo = country => {\n  return (dispatch, getState) => {\n    fetch(`https://disease.sh/v3/covid-19/countries/${country}?strict=true`).then(res => res.json().then(r => {\n      // parse the api response to store just the used data\n      const parsedCountry = parseCountry(r);\n      dispatch({\n        type: GetCountryInfoSuccess,\n        data: parsedCountry\n      });\n    })).catch(err => {\n      console.error(err);\n      dispatch({\n        type: GetCountryInfoError,\n        data: err\n      });\n    });\n  };\n};\nexport const getWorldInfo = () => {\n  return (dispatch, getState) => {\n    fetch('https://disease.sh/v3/covid-19/countries').then(res => res.json().then(r => {\n      const parsedWorld = r.map(country => {\n        return parseCountry(country);\n      });\n      dispatch({\n        type: GetWorldInfoSuccess,\n        data: parsedWorld\n      });\n    })).catch(err => {\n      dispatch({\n        type: GetWorldInfoError,\n        data: err\n      });\n    });\n  };\n};\nexport const getGlobalInfo = () => {\n  return (dispatch, getState) => {\n    fetch('https://disease.sh/v3/covid-19/all').then(json => json.json().then(res => {\n      const global = {\n        updatedAt: moment(res.updated).fromNow(),\n        infected: rounded(res.cases),\n        recovered: rounded(res.recovered),\n        deaths: rounded(res.deaths)\n      };\n      dispatch({\n        type: GetGlobalInfoSuccess,\n        data: global\n      });\n    })).catch(err => {\n      console.error(err);\n      dispatch({\n        type: GetGlobalInfoError,\n        data: err\n      });\n    });\n  };\n};\nexport const portugalInfo = () => {\n  return (dispatch, getState) => {\n    fetch('https://covid19-api.vost.pt/Requests/get_status').then(res => res.json().then(resp => {\n      if (resp.status === \"Server is OK\") {\n        fetch('https://covid19-api.vost.pt/Requests/get_full_dataset').then(res => res.json().then(resp => {\n          dispatch({\n            type: GetPortugalInfoSuccess,\n            data: {\n              days: resp.data\n            }\n          });\n        })).catch();\n      }\n\n      dispatch({\n        type: PortugalServerDown\n      });\n    })).catch();\n  };\n};","map":{"version":3,"sources":["/home/joaquim/internship/covid-map/src/store/actions/infoActions.js"],"names":["GetCountryInfoSuccess","GetCountryInfoError","GetWorldInfoSuccess","GetWorldInfoError","GetGlobalInfoSuccess","GetGlobalInfoError","PortugalServerDown","GetPortugalInfoSuccess","parseCountry","moment","rounded","getMapInfo","country","dispatch","getState","fetch","then","res","json","r","parsedCountry","type","data","catch","err","console","error","getWorldInfo","parsedWorld","map","getGlobalInfo","global","updatedAt","updated","fromNow","infected","cases","recovered","deaths","portugalInfo","resp","status","days"],"mappings":"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","sourcesContent":["import {\n    GetCountryInfoSuccess,\n    GetCountryInfoError,\n    GetWorldInfoSuccess,\n    GetWorldInfoError,\n    GetGlobalInfoSuccess,\n    GetGlobalInfoError,\n    PortugalServerDown,\n    GetPortugalInfoSuccess,\n} from \"../actionList\";\nimport { parseCountry } from \"../../functions/parseCountry\";\nimport moment from \"moment\";\nimport {rounded} from \"../../functions/round\";\n\nexport const getMapInfo = (country) => {\n    return (dispatch, getState) =>  {\n        fetch(`https://disease.sh/v3/covid-19/countries/${country}?strict=true`)\n            .then( res => res.json()\n                .then( r => {\n                    // parse the api response to store just the used data\n                    const parsedCountry = parseCountry(r);\n                    dispatch({type: GetCountryInfoSuccess, data: parsedCountry});\n                }))\n            .catch( err => {\n                console.error(err);\n                dispatch({type: GetCountryInfoError, data: err});\n            })\n    }\n}\n\nexport const getWorldInfo = () => {\n    return (dispatch, getState) => {\n        fetch('https://disease.sh/v3/covid-19/countries')\n            .then( res => res.json()\n                .then( r =>{\n                    const parsedWorld = r.map( country => {\n                        return parseCountry(country);\n                    });\n                    dispatch({ type: GetWorldInfoSuccess, data: parsedWorld})\n                }))\n            .catch( err => {\n                dispatch({ type: GetWorldInfoError, data: err})\n            })\n    }\n}\n\nexport const getGlobalInfo = () => {\n    return (dispatch, getState) => {\n        fetch('https://disease.sh/v3/covid-19/all')\n            .then(json => json.json()\n                .then( res => {\n                    const global =  {\n                        updatedAt: moment(res.updated).fromNow(),\n                        infected: rounded(res.cases),\n                        recovered: rounded(res.recovered),\n                        deaths: rounded(res.deaths),\n                    }\n                    dispatch({ type: GetGlobalInfoSuccess, data: global});\n                })\n            )\n            .catch(err => {\n                console.error(err)\n                dispatch({type: GetGlobalInfoError, data: err})\n            })\n    }\n}\n\nexport const portugalInfo = ()  => {\n    return (dispatch, getState) => {\n        fetch('https://covid19-api.vost.pt/Requests/get_status')\n            .then( res => res.json()\n                .then( resp => {\n                    if (resp.status === \"Server is OK\") {\n                        fetch('https://covid19-api.vost.pt/Requests/get_full_dataset')\n                            .then( res => res.json()\n                                .then(resp => {\n                                    dispatch({ type: GetPortugalInfoSuccess, data: {\n                                            days: resp.data,\n                                            \n                                        }})\n                                }))\n                            .catch()\n                    }\n                    dispatch({ type: PortugalServerDown })\n                })\n            )\n            .catch()\n    }\n}"]},"metadata":{},"sourceType":"module"}