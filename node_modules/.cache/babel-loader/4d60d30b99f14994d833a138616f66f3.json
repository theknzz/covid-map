{"ast":null,"code":"import _taggedTemplateLiteral from\"/home/joaquim/internship/covid-map/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import{jsx as _jsx}from\"react/jsx-runtime\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    max-height: 87.2vh;\\n    flex: 2;\\n    display: flex;\\n    justify-content: center;\\n    min-width: 30vw;\\n    flex-flow: column wrap;\\n    border: 1px solid \",\";\\n    background-color: \",\";\\n    margin: 5px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{memo,useEffect}from\"react\";import{connect}from'react-redux';import{getGlobalInfo,getMapInfo,getWorldInfo,portugalInfo}from\"../../store/actions/infoActions\";import styled from\"@emotion/styled\";import{parseCountryToJsx}from\"../../functions/parseCountryToJsx\";import{ZoomableGroup,ComposableMap,Geographies,Geography}from\"react-simple-maps\";import{useTheme}from\"emotion-theming\";var geoUrl=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";var MapContainer=styled.div(_templateObject(),function(props){return props.theme.border;},function(props){return props.theme.mapBackground;});var MapChart=function MapChart(_ref){var setTooltipContent=_ref.setTooltipContent,getInfo=_ref.getInfo,country=_ref.country,getWorld=_ref.getWorld,getGlobal=_ref.getGlobal,getPortugal=_ref.getPortugal,portugal=_ref.portugal;var theme=useTheme();useEffect(function(){getWorld();getGlobal();getPortugal();},[]);return/*#__PURE__*/_jsx(MapContainer,{theme:theme,children:/*#__PURE__*/_jsx(ComposableMap,{className:'map',\"data-tip\":\"\",projectionConfig:{scale:50},width:500,height:500,children:/*#__PURE__*/_jsx(ZoomableGroup,{center:[20,180],zoom:4,children:/*#__PURE__*/_jsx(Geographies,{geography:geoUrl,children:function children(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geo){return/*#__PURE__*/_jsx(Geography,{geography:geo,onClick:function onClick(){setTooltipContent(parseCountryToJsx(country));},onMouseEnter:function onMouseEnter(){var _geo$properties=geo.properties,NAME=_geo$properties.NAME,POP_EST=_geo$properties.POP_EST;getInfo(NAME);setTooltipContent(\"\".concat(NAME));},onMouseLeave:function onMouseLeave(){setTooltipContent(\"\");},style:{default:{fill:theme.mapFill,outline:\"none\"},hover:{fill:\"#F53\",outline:\"none\"},pressed:{fill:\"#E42\",outline:\"none\"}}},geo.rsmKey);});}})})})});};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getInfo:function getInfo(country){return dispatch(getMapInfo(country));},getWorld:function getWorld(){return dispatch(getWorldInfo());},getGlobal:function getGlobal(){return dispatch(getGlobalInfo());},getPortugal:function getPortugal(){return dispatch(portugalInfo());}};};var mapStateToProps=function mapStateToProps(state){return{country:state.info.country,portugal:state.info.portugal};};export default connect(mapStateToProps,mapDispatchToProps)(/*#__PURE__*/memo(MapChart));","map":{"version":3,"sources":["/home/joaquim/internship/covid-map/src/components/Map/MapChart.js"],"names":["React","memo","useEffect","connect","getGlobalInfo","getMapInfo","getWorldInfo","portugalInfo","styled","parseCountryToJsx","ZoomableGroup","ComposableMap","Geographies","Geography","useTheme","geoUrl","MapContainer","div","props","theme","border","mapBackground","MapChart","setTooltipContent","getInfo","country","getWorld","getGlobal","getPortugal","portugal","scale","geographies","map","geo","properties","NAME","POP_EST","default","fill","mapFill","outline","hover","pressed","rsmKey","mapDispatchToProps","dispatch","mapStateToProps","state","info"],"mappings":"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","sourcesContent":["import React, { memo, useEffect } from \"react\";\nimport { connect } from 'react-redux'\nimport { getGlobalInfo, getMapInfo, getWorldInfo, portugalInfo } from \"../../store/actions/infoActions\";\nimport styled from \"@emotion/styled\";\nimport { parseCountryToJsx } from \"../../functions/parseCountryToJsx\";\nimport {\n    ZoomableGroup,\n    ComposableMap,\n    Geographies,\n    Geography\n} from \"react-simple-maps\";\nimport {useTheme} from \"emotion-theming\";\n\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapContainer = styled.div`\n    max-height: 87.2vh;\n    flex: 2;\n    display: flex;\n    justify-content: center;\n    min-width: 30vw;\n    flex-flow: column wrap;\n    border: 1px solid ${props => props.theme.border};\n    background-color: ${props => props.theme.mapBackground};\n    margin: 5px;\n`\n\nconst MapChart = ({ setTooltipContent, getInfo, country, getWorld, getGlobal, getPortugal, portugal }) => {\n\n    const theme = useTheme();\n\n    useEffect( () => {\n        getWorld();\n        getGlobal();\n        getPortugal();\n    }, [ ]);\n\n    return (\n        <MapContainer theme={theme}>\n            <ComposableMap className={'map'} data-tip=\"\" projectionConfig={{ scale: 50 }} width={500} height={500}>\n                <ZoomableGroup center={[20, 180]} zoom={4}>\n                    <Geographies geography={geoUrl}>\n                        {({ geographies }) =>\n                            geographies.map(geo => (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    onClick={() => {\n                                        setTooltipContent(parseCountryToJsx(country));\n                                    }}\n                                    onMouseEnter={() => {\n                                        const { NAME, POP_EST } = geo.properties;\n                                        getInfo(NAME);\n                                        setTooltipContent(`${NAME}`);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltipContent(\"\");\n                                    }}\n                                    style={{\n                                        default: {\n                                            fill: theme.mapFill,\n                                            outline: \"none\",\n                                        },\n                                        hover: {\n                                            fill: \"#F53\",\n                                            outline: \"none\"\n                                        },\n                                        pressed: {\n                                            fill: \"#E42\",\n                                            outline: \"none\"\n                                        }\n                                    }}\n                                />\n                            ))\n                        }\n                    </Geographies>\n                </ZoomableGroup>\n            </ComposableMap>\n        </MapContainer>\n    );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getInfo: (country) => dispatch(getMapInfo(country)),\n        getWorld: () => dispatch(getWorldInfo()),\n        getGlobal: () => dispatch(getGlobalInfo()),\n        getPortugal: () => dispatch(portugalInfo())\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        country: state.info.country,\n        portugal: state.info.portugal,\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(MapChart));\n"]},"metadata":{},"sourceType":"module"}