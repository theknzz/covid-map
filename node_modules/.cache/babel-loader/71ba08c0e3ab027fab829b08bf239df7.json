{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/joaquim/internship/covid-map/src/components/Map/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect } from \"react\";\nimport { rounded } from '../../functions/round';\nimport { connect } from 'react-redux';\nimport { getGlobalInfo, getMapInfo, getWorldInfo, portugalInfo } from \"../../store/actions/infoActions\";\nimport styled from \"@emotion/styled\";\nimport { parseCountryToJsx } from \"../../functions/parseCountryToJsx\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst MapContainer = styled.div`\n    max-height: 87.2vh;\n    flex: 2;\n    display: flex;\n    justify-content: center;\n    flex-flow: column wrap;\n    border: 1px solid #525252;\n    background-color: #010f1a;\n    margin: 5px;\n`;\n_c = MapContainer;\n\nconst MapChart = ({\n  setTooltipContent,\n  getInfo,\n  country,\n  getWorld,\n  getGlobal,\n  getPortugal,\n  portugal\n}) => {\n  _s();\n\n  useEffect(() => {\n    getWorld();\n    getGlobal();\n    getPortugal();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      className: 'map',\n      \"data-tip\": \"\",\n      projectionConfig: {\n        scale: 50\n      },\n      width: 500,\n      height: 500,\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        center: [20, 180],\n        zoom: 4,\n        children: /*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoUrl,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onClick: () => {\n              const {\n                NAME,\n                POP_EST\n              } = geo.properties;\n              getInfo(NAME);\n              setTimeout(setTooltipContent(parseCountryToJsx(country), 500));\n            },\n            onMouseEnter: () => {\n              const {\n                NAME,\n                POP_EST\n              } = geo.properties; // getInfo(NAME);\n\n              setTooltipContent(`${NAME}`);\n            },\n            onMouseLeave: () => {\n              setTooltipContent(\"\");\n            },\n            style: {\n              default: {\n                fill: \"#2a2a28\",\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#F53\",\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#E42\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = MapChart;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getInfo: country => dispatch(getMapInfo(country)),\n    getWorld: () => dispatch(getWorldInfo()),\n    getGlobal: () => dispatch(getGlobalInfo()),\n    getPortugal: () => dispatch(portugalInfo())\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    country: state.info.country,\n    portugal: state.info.portugal\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/memo(MapChart));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"MapChart\");","map":{"version":3,"sources":["/home/joaquim/internship/covid-map/src/components/Map/MapChart.js"],"names":["React","memo","useEffect","rounded","connect","getGlobalInfo","getMapInfo","getWorldInfo","portugalInfo","styled","parseCountryToJsx","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","MapContainer","div","MapChart","setTooltipContent","getInfo","country","getWorld","getGlobal","getPortugal","portugal","scale","geographies","map","geo","NAME","POP_EST","properties","setTimeout","default","fill","outline","hover","pressed","rsmKey","mapDispatchToProps","dispatch","mapStateToProps","state","info"],"mappings":"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","sourcesContent":["import React, { memo, useEffect } from \"react\";\nimport { rounded } from '../../functions/round'\nimport { connect } from 'react-redux'\nimport { getGlobalInfo, getMapInfo, getWorldInfo, portugalInfo } from \"../../store/actions/infoActions\";\nimport styled from \"@emotion/styled\";\nimport { parseCountryToJsx } from \"../../functions/parseCountryToJsx\";\nimport {\n    ZoomableGroup,\n    ComposableMap,\n    Geographies,\n    Geography\n} from \"react-simple-maps\";\n\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapContainer = styled.div`\n    max-height: 87.2vh;\n    flex: 2;\n    display: flex;\n    justify-content: center;\n    flex-flow: column wrap;\n    border: 1px solid #525252;\n    background-color: #010f1a;\n    margin: 5px;\n`\n\nconst MapChart = ({ setTooltipContent, getInfo, country, getWorld, getGlobal, getPortugal, portugal }) => {\n\n    useEffect( () => {\n        getWorld();\n        getGlobal();\n        getPortugal();\n    }, []);\n\n    return (\n        <MapContainer>\n            <ComposableMap className={'map'} data-tip=\"\" projectionConfig={{ scale: 50 }} width={500} height={500}>\n                <ZoomableGroup center={[20, 180]} zoom={4}>\n                    <Geographies geography={geoUrl}>\n                        {({ geographies }) =>\n                            geographies.map(geo => (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    onClick={() => {\n                                        const { NAME, POP_EST } = geo.properties;\n                                        getInfo(NAME);\n                                        setTimeout(setTooltipContent(parseCountryToJsx(country), 500))\n                                    }}\n                                    onMouseEnter={() => {\n                                        const { NAME, POP_EST } = geo.properties;\n                                        // getInfo(NAME);\n                                        setTooltipContent(`${NAME}`);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltipContent(\"\");\n                                    }}\n                                    style={{\n                                        default: {\n                                            fill: \"#2a2a28\",\n                                            outline: \"none\"\n                                        },\n                                        hover: {\n                                            fill: \"#F53\",\n                                            outline: \"none\"\n                                        },\n                                        pressed: {\n                                            fill: \"#E42\",\n                                            outline: \"none\"\n                                        }\n                                    }}\n                                />\n                            ))\n                        }\n                    </Geographies>\n                </ZoomableGroup>\n            </ComposableMap>\n        </MapContainer>\n    );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getInfo: (country) => dispatch(getMapInfo(country)),\n        getWorld: () => dispatch(getWorldInfo()),\n        getGlobal: () => dispatch(getGlobalInfo()),\n        getPortugal: () => dispatch(portugalInfo())\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        country: state.info.country,\n        portugal: state.info.portugal,\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(MapChart));\n"]},"metadata":{},"sourceType":"module"}