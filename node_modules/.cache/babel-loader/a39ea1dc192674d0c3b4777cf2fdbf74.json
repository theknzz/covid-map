{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joaquim/internship/covid-map/src/components/RightPane/GenderGraph.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport { connect } from 'react-redux';\n\nconst GenderGraph = ({\n  portugal\n}) => {\n  const canvas = document.getElementById('genderGraph');\n  const context = canvas && canvas.getContext('2d');\n  let infectedM = [];\n\n  for (let i in portugal.infected_m) {\n    const value = portugal.infected_m[i];\n    infectedM.push(value ? value : 0);\n  }\n\n  console.log(infectedM[infectedM.length - 1]);\n  let infectedF = [];\n\n  for (let i in portugal.infected_f) {\n    const value = portugal.infected_f[i];\n    infectedF.push(value ? value : 0);\n  }\n\n  console.log(infectedF[infectedM.length - 1]);\n  const data = {\n    labels: ['M', 'F'],\n    datasets: [{\n      label: '# of masculine infected',\n      data: infectedM[infectedM.length - 1],\n      backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n      borderWidth: 1\n    }, {\n      label: '# of feminine infected',\n      data: infectedF[infectedF.length - 1],\n      backgroundColor: ['rgb(152,253,149, 0.5)'],\n      borderWidth: 1\n    }]\n  };\n  const graph = context && new Chart(context, {\n    type: 'bar',\n    data: {\n      datasets: [{\n        barPercentage: 0.5,\n        barThickness: 6,\n        maxBarThickness: 8,\n        minBarLength: 2,\n        data: [10, 20, 30, 40, 50, 60, 70]\n      }]\n    },\n    options: {\n      scales: {\n        xAxes: [{\n          gridLines: {\n            offsetGridLines: true\n          }\n        }]\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: 'genderGraph'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_c = GenderGraph;\n\nconst mapStateToProps = state => {\n  return {\n    portugal: state.info.portugal\n  };\n};\n\nexport default connect(mapStateToProps)(GenderGraph);\n\nvar _c;\n\n$RefreshReg$(_c, \"GenderGraph\");","map":{"version":3,"sources":["/home/joaquim/internship/covid-map/src/components/RightPane/GenderGraph.js"],"names":["React","Chart","connect","GenderGraph","portugal","canvas","document","getElementById","context","getContext","infectedM","i","infected_m","value","push","console","log","length","infectedF","infected_f","data","labels","datasets","label","backgroundColor","borderWidth","graph","type","barPercentage","barThickness","maxBarThickness","minBarLength","options","scales","xAxes","gridLines","offsetGridLines","mapStateToProps","state","info"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Chart from 'chart.js'\nimport { connect } from 'react-redux'\n\nconst GenderGraph = ({ portugal }) => {\n\n    const canvas = document.getElementById('genderGraph');\n    const context = canvas && canvas.getContext('2d');\n\n    let infectedM = [];\n    for (let i in portugal.infected_m) {\n        const value = portugal.infected_m[i];\n        infectedM.push(value ? value : 0);\n    }\n\n    console.log(infectedM[infectedM.length-1])\n\n    let infectedF = [];\n    for (let i in portugal.infected_f) {\n        const value = portugal.infected_f[i];\n        infectedF.push(value ? value : 0);\n    }\n\n    console.log(infectedF[infectedM.length-1])\n\n    const data = {\n        labels: ['M', 'F'],\n            datasets: [{\n            label: '# of masculine infected',\n            data: infectedM[infectedM.length-1],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n            ],\n            borderWidth: 1\n        }, {\n            label: '# of feminine infected',\n            data: infectedF[infectedF.length-1],\n            backgroundColor: [\n                'rgb(152,253,149, 0.5)',\n            ],\n            borderWidth: 1\n        }]\n    }\n    const graph = context && new Chart(context, {\n        type: 'bar',\n        data: {\n            datasets: [{\n                barPercentage: 0.5,\n                barThickness: 6,\n                maxBarThickness: 8,\n                minBarLength: 2,\n                data: [10, 20, 30, 40, 50, 60, 70]\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    gridLines: {\n                        offsetGridLines: true\n                    }\n                }]\n            }\n        }\n    });\n\n    return (\n        <canvas id={'genderGraph'}/>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        portugal: state.info.portugal,\n    }\n}\n\nexport default connect(mapStateToProps)(GenderGraph)"]},"metadata":{},"sourceType":"module"}